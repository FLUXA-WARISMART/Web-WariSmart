<template>
  <div class="inventory-view">
    <!-- Modal de Nuevo Producto -->
    <div v-if="showProductModal" class="modal-overlay" @click.self="closeModal">
      <div class="modal-content wide-modal">
        <div class="modal-header">
          <h3>{{ editingProduct ? 'Editar Producto' : 'Nuevo Producto' }}</h3>
          <button class="close-button" @click="closeModal">&times;</button>
        </div>
        <div class="modal-body">
          <form @submit.prevent="saveProduct" class="product-form">
            <div class="form-grid">
              <!-- Columna Izquierda - Imagen -->
              <div class="form-column image-upload">
                <div class="image-preview" @click="triggerFileInput">
                  <img v-if="imagePreview" :src="imagePreview" alt="Vista previa" class="preview-image" />
                  <div v-else class="upload-placeholder">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h7"/>
                      <circle cx="9" cy="9" r="2"/>
                      <path d="M21 15l-3.1-3.1a2 2 0 0 0-2.8 0L9 18"/>
                      <path d="M14 14l1-1a2 2 0 0 1 2.8 0L21 17"/>
                    </svg>
                    <span>Haz clic para subir una imagen</span>
                  </div>
                </div>
                <input 
                  type="file" 
                  ref="fileInput" 
                  @change="handleImageUpload" 
                  accept="image/*" 
                  class="file-input"
                  style="display: none;"
                >
                <div class="image-actions" v-if="imagePreview">
                  <button type="button" class="btn-change" @click="triggerFileInput">Cambiar imagen</button>
                  <button type="button" class="btn-remove" @click="removeImage">Eliminar</button>
                </div>
              </div>

              <!-- Columna Derecha - Formulario -->
              <div class="form-column form-fields">
                <div class="form-row">
                  <div class="form-group">
                    <label for="codigo">Código/SKU *</label>
                    <input 
                      type="text" 
                      id="codigo" 
                      v-model="newProduct.codigo" 
                      required
                      placeholder="Ej: IP-14PRO-001"
                      class="form-control"
                    >
                  </div>
                  <div class="form-group">
                    <label for="categoria">Categoría *</label>
                    <select id="categoria" v-model="newProduct.categoria" required class="form-control">
                      <option value="">Seleccionar</option>
                      <option v-for="category in categorias" :key="category" :value="category">{{ category }}</option>
                    </select>
                  </div>
                </div>

                <div class="form-group">
                  <label for="producto">Nombre del Producto *</label>
                  <input 
                    type="text" 
                    id="producto" 
                    v-model="newProduct.nombre" 
                    required
                    placeholder="Ej: iPhone 14 Pro"
                    class="form-control"
                  >
                </div>

                <div class="form-row">
                  <div class="form-group">
                    <label for="precio">Precio (S/) *</label>
                    <div class="input-group">
                      <span class="input-group-text">S/</span>
                      <input 
                        type="number" 
                        id="precio" 
                        v-model.number="newProduct.precio" 
                        step="0.01"
                        min="0"
                        required
                        placeholder="0.00"
                        class="form-control"
                      >
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="stock-actual">Stock Inicial *</label>
                    <input 
                      type="number" 
                      id="stock-actual" 
                      v-model.number="newProduct.stockActual" 
                      required
                      min="0"
                      class="form-control"
                    >
                  </div>
                </div>

                <div class="form-group">
                  <label for="descripcion">Descripción</label>
                  <textarea 
                    id="descripcion" 
                    v-model="newProduct.descripcion" 
                    rows="3"
                    placeholder="Agrega una descripción detallada del producto..."
                    class="form-control"
                  ></textarea>
                </div>
              </div>
            </div>

            <div class="form-actions">
              <button type="button" class="btn btn-outline-secondary" @click="closeModal">
                Cancelar
              </button>
              <button type="submit" class="btn btn-primary">
                <span v-if="editingProduct">Actualizar Producto</span>
                <span v-else>Agregar Producto</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <div class="inventory-header">
      <div>
        <h1 class="page-title">Gestión de Inventario</h1>
        <p class="page-subtitle">Control completo de productos, stock y movimientos</p>
      </div>
      <div class="header-actions">
        <button class="btn-secondary">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/><polyline points="7 10 12 15 17 10"/><line x1="12" y1="15" x2="12" y2="3"/>
          </svg>
          Exportar
        </button>
        <button class="btn-primary" @click="openNewProductModal">
          <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/>
          </svg>
          Nuevo Producto
        </button>
      </div>
    </div>

    <!-- Stats Cards -->
    <InventoryStats :stats="stats" />

    <!-- Tabs Navigation -->
    <div class="tabs-container">
      <div class="tabs">
        <button 
          v-for="tab in tabs" 
          :key="tab.id"
          :class="['tab', { active: activeTab === tab.id }]"
          @click="activeTab = tab.id"
        >
          <component :is="tab.icon" />
          {{ tab.label }}
        </button>
      </div>
    </div>

    <!-- Products Table -->
    <ProductsTable v-if="activeTab === 'products'" />

    <!-- Quick Actions -->
    <QuickActionsInventory />

    <!-- Recent Activity -->
    <div class="recent-activity">
      <h3 class="section-title">Actividad Reciente</h3>
      <div class="activity-list">
        <div v-for="activity in recentActivity" :key="activity.id" class="activity-item">
          <div class="activity-icon" :style="{ backgroundColor: activity.color }">
            <component :is="activity.icon" />
          </div>
          <div class="activity-content">
            <div class="activity-title">{{ activity.title }}</div>
            <div class="activity-description">{{ activity.description }}</div>
          </div>
          <div class="activity-time">{{ activity.time }}</div>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, nextTick } from 'vue';
import InventoryStats from '../components/InventoryStats.vue';
import ProductsTable from '../components/ProductsTable.vue';
import QuickActionsInventory from '../components/QuickActionsInventory.vue';

// Estado del modal
const showProductModal = ref(false);
const editingProduct = ref(null);
const fileInput = ref(null);
const imageFile = ref(null);
const imagePreview = ref('');

// Categorías predefinidas
const categorias = [
  'Electrónicos',
  'Ropa',
  'Hogar',
  'Oficina',
  'Deportes',
  'Belleza',
  'Juguetes',
  'Alimentos',
  'Bebidas',
  'Otros'
];

// Nuevo producto
const newProduct = ref(createEmptyProduct());

// Crear un producto vacío
function createEmptyProduct() {
  return {
    id: null,
    codigo: '',
    nombre: '',
    categoria: '',
    precio: 0,
    stockActual: 0,
    descripcion: '',
    imagen: null,
    fechaCreacion: new Date().toISOString().split('T')[0],
    estado: 'Activo'
  };
}

// Abrir modal de nuevo producto
const openNewProductModal = (product = null) => {
  editingProduct.value = product ? { ...product } : null;
  
  // Resetear el formulario
  resetForm();
  
  // Si estamos editando, cargar los datos del producto
  if (product) {
    newProduct.value = { ...product };
    if (product.imagen) {
      imagePreview.value = product.imagen;
    }
  }
  
  showProductModal.value = true;
  
  // Enfocar el primer campo
  nextTick(() => {
    const firstInput = document.querySelector('.form-control');
    if (firstInput) firstInput.focus();
  });
};

// Resetear el formulario
const resetForm = () => {
  newProduct.value = createEmptyProduct();
  imageFile.value = null;
  imagePreview.value = '';
  if (fileInput.value) {
    fileInput.value.value = '';
  }
};

// Disparar el input de archivo
const triggerFileInput = () => {
  if (fileInput.value) {
    fileInput.value.click();
  }
};

// Manejar la subida de imagen
const handleImageUpload = (event) => {
  const file = event.target.files[0];
  if (!file) return;
  
  // Validar tipo de archivo
  if (!file.type.startsWith('image/')) {
    alert('Por favor, selecciona un archivo de imagen válido.');
    return;
  }
  
  // Validar tamaño (máx 2MB)
  if (file.size > 2 * 1024 * 1024) {
    alert('La imagen no debe pesar más de 2MB.');
    return;
  }
  
  imageFile.value = file;
  
  // Crear vista previa
  const reader = new FileReader();
  reader.onload = (e) => {
    imagePreview.value = e.target.result;
  };
  reader.readAsDataURL(file);
};

// Eliminar imagen
const removeImage = () => {
  imageFile.value = null;
  imagePreview.value = '';
  if (fileInput.value) {
    fileInput.value.value = '';
  }
};

// Cerrar modal
const closeModal = () => {
  showProductModal.value = false;
};

// Guardar producto en LocalStorage
const saveProduct = async () => {
  try {
    // Validar campos requeridos
    if (!newProduct.value.codigo || !newProduct.value.nombre || 
        !newProduct.value.categoria || newProduct.value.precio <= 0) {
      alert('Por favor complete todos los campos requeridos');
      return;
    }
    
    // Obtener productos existentes o inicializar array vacío
    const productos = JSON.parse(localStorage.getItem('productos') || '[]');
    
    // Si hay una imagen, convertirla a base64
    if (imageFile.value) {
      const base64Image = await fileToBase64(imageFile.value);
      newProduct.value.imagen = base64Image;
    } else if (editingProduct.value && !imagePreview.value) {
      // Si estamos editando y se eliminó la imagen
      newProduct.value.imagen = null;
    }
    
    if (editingProduct.value) {
      // Actualizar producto existente
      const index = productos.findIndex(p => p.id === editingProduct.value.id);
      if (index !== -1) {
        // Mantener el ID y la fecha de creación original
        newProduct.value.id = editingProduct.value.id;
        newProduct.value.fechaCreacion = productos[index].fechaCreacion;
        
        // Actualizar el producto
        productos[index] = { ...newProduct.value };
        
        // Mostrar mensaje de éxito
        alert('Producto actualizado exitosamente');
      }
    } else {
      // Crear nuevo producto
      const nuevoId = productos.length > 0 
        ? Math.max(...productos.map(p => p.id)) + 1 
        : 1;
      
      // Asignar ID y fecha de creación
      newProduct.value.id = nuevoId;
      newProduct.value.fechaCreacion = new Date().toISOString().split('T')[0];
      
      // Agregar el nuevo producto
      productos.push({ ...newProduct.value });
      
      // Mostrar mensaje de éxito
      alert('Producto agregado exitosamente');
    }
    
    // Guardar en LocalStorage
    localStorage.setItem('productos', JSON.stringify(productos));
    
    // Cerrar modal y actualizar la lista
    showProductModal.value = false;
    
    // Disparar evento para actualizar la tabla
    window.dispatchEvent(new CustomEvent('product-updated'));
    
  } catch (error) {
    console.error('Error al guardar el producto:', error);
    alert('Ocurrió un error al guardar el producto: ' + error.message);
  }
};

// Convertir archivo a base64
const fileToBase64 = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });
};

// Cargar datos iniciales si no existen
const initializeLocalStorage = () => {
  if (!localStorage.getItem('productos')) {
    const productosIniciales = [
      {
        id: 1,
        codigo: 'IP-14PRO-001',
        nombre: 'iPhone 14 Pro',
        categoria: 'Electrónicos',
        precio: 999.00,
        stockActual: 45,
        descripcion: 'Último modelo de iPhone con pantalla ProMotion',
        fechaCreacion: new Date().toISOString().split('T')[0],
        estado: 'Activo'
      },
      {
        id: 2,
        codigo: 'MBA13M2001',
        nombre: 'MacBook Air M2',
        categoria: 'Electrónicos',
        precio: 1299.00,
        stockActual: 3,
        descripcion: 'Portátil ultradelgado con chip M2',
        fechaCreacion: new Date().toISOString().split('T')[0],
        estado: 'Activo'
      }
    ];
    localStorage.setItem('productos', JSON.stringify(productosIniciales));
  }
};

// Inicializar LocalStorage al cargar el componente
onMounted(() => {
  initializeLocalStorage();
});

const stats = ref({
  totalProducts: 1247,
  lowStock: 23,
  expiring: 8,
  totalValue: 'S/89,450'
});

const activeTab = ref('products');

const tabs = [
  {
    id: 'products',
    label: 'Productos',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><line x1="8" y1="6" x2="21" y2="6"/><line x1="8" y1="12" x2="21" y2="12"/><line x1="8" y1="18" x2="21" y2="18"/><line x1="3" y1="6" x2="3.01" y2="6"/><line x1="3" y1="12" x2="3.01" y2="12"/><line x1="3" y1="18" x2="3.01" y2="18"/></svg>' }
  },
  {
    id: 'locations',
    label: 'Ubicaciones',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"/><circle cx="12" cy="10" r="3"/></svg>' }
  },
  {
    id: 'alerts',
    label: 'Alertas',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg>' }
  },
  {
    id: 'losses',
    label: 'Mermas',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="3 6 5 6 21 6"/><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"/></svg>' }
  },
  {
    id: 'audits',
    label: 'Auditorías',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14 2 14 8 20 8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/></svg>' }
  },
  {
    id: 'receptions',
    label: 'Recepciones',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M16 16l3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1z"/><path d="M2 16l3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1z"/><path d="M7 21h10"/><path d="M12 3v18"/></svg>' }
  },
  {
    id: 'returns',
    label: 'Devoluciones',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><polyline points="9 14 4 9 9 4"/><path d="M20 20v-7a4 4 0 0 0-4-4H4"/></svg>' }
  }
];

const recentActivity = ref([
  {
    id: 1,
    title: 'Recepción de mercadería',
    description: '20 unidades de iPhone 14 Pro agregadas',
    time: 'Hace 2 horas',
    color: '#dcfce7',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="#10b981" stroke-width="2"><line x1="12" y1="5" x2="12" y2="19"/><line x1="5" y1="12" x2="19" y2="12"/></svg>' }
  },
  {
    id: 2,
    title: 'Alerta de stock bajo',
    description: 'MacBook Air M2 tiene solo 3 unidades',
    time: 'Hace 4 horas',
    color: '#fed7aa',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="#f59e0b" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/></svg>' }
  },
  {
    id: 3,
    title: 'Auditoría completada',
    description: 'Sección Electrónicos - Almacén Principal',
    time: 'Ayer',
    color: '#dbeafe',
    icon: { template: '<svg viewBox="0 0 24 24" fill="none" stroke="#3b82f6" stroke-width="2"><polyline points="20 6 9 17 4 12"/></svg>' }
  }
]);
</script>

<style scoped>
/* Estilos del modal */
.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1050;
  padding: 1rem;
}

.modal-content {
  background: white;
  border-radius: 12px;
  width: 100%;
  max-width: 800px;
  max-height: 90vh;
  overflow-y: auto;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  animation: modalFadeIn 0.3s ease-out;
  display: flex;
  flex-direction: column;
}

/* Modal más ancho */
.wide-modal {
  max-width: 900px;
}

@keyframes modalFadeIn {
  from { opacity: 0; transform: translateY(-20px); }
  to { opacity: 1; transform: translateY(0); }
}

.modal-header {
  padding: 20px 24px;
  border-bottom: 1px solid #e5e7eb;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.modal-header h3 {
  margin: 0;
  font-size: 20px;
  font-weight: 600;
  color: #1a1a1a;
}

.close-button {
  background: none;
  border: none;
  font-size: 24px;
  cursor: pointer;
  color: #6b7280;
  padding: 0;
  line-height: 1;
}

.close-button:hover {
  color: #1a1a1a;
}

.modal-body {
  padding: 24px;
}

.product-form {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
  flex: 1;
}

/* Diseño de cuadrícula para el formulario */
.form-grid {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 2rem;
  margin-bottom: 1.5rem;
}

/* Estilos para la columna de la imagen */
.image-upload {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.image-preview {
  width: 100%;
  height: 280px;
  border: 2px dashed #dee2e6;
  border-radius: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
  overflow: hidden;
  background-color: #f8f9fa;
  cursor: pointer;
  transition: all 0.3s ease;
}

.image-preview:hover {
  border-color: #0d6efd;
  background-color: #f1f8ff;
}

.preview-image {
  max-width: 100%;
  max-height: 100%;
  object-fit: contain;
}

.upload-placeholder {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  color: #6c757d;
  text-align: center;
  padding: 1.5rem;
}

.upload-placeholder svg {
  width: 48px;
  height: 48px;
  margin-bottom: 1rem;
  color: #adb5bd;
}

.image-actions {
  display: flex;
  gap: 0.5rem;
  justify-content: center;
}

.btn-change, .btn-remove {
  padding: 0.375rem 0.75rem;
  border-radius: 4px;
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  border: 1px solid transparent;
}

.btn-change {
  background-color: #e9ecef;
  color: #495057;
  border-color: #dee2e6;
}

.btn-change:hover {
  background-color: #dee2e6;
}

.btn-remove {
  background-color: #f8d7da;
  color: #842029;
  border-color: #f5c2c7;
}

.btn-remove:hover {
  background-color: #f1aeb5;
}

/* Estilos para la columna de campos del formulario */
.form-fields {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.form-group {
  margin-bottom: 0;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin: 0;
}

.form-control {
  width: 100%;
  padding: 0.5rem 0.75rem;
  font-size: 0.9375rem;
  line-height: 1.5;
  color: #212529;
  background-color: #fff;
  background-clip: padding-box;
  border: 1px solid #ced4da;
  border-radius: 0.375rem;
  transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}

.form-control:focus {
  color: #212529;
  background-color: #fff;
  border-color: #86b7fe;
  outline: 0;
  box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
}

textarea.form-control {
  min-height: 100px;
  resize: vertical;
}

/* Grupo de entrada para moneda */
.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap;
  align-items: stretch;
  width: 100%;
}

.input-group-text {
  display: flex;
  align-items: center;
  padding: 0.5rem 0.75rem;
  font-size: 0.9375rem;
  font-weight: 400;
  line-height: 1.5;
  color: #212529;
  text-align: center;
  white-space: nowrap;
  background-color: #e9ecef;
  border: 1px solid #ced4da;
  border-radius: 0.375rem 0 0 0.375rem;
  border-right: none;
}

.input-group > .form-control {
  position: relative;
  flex: 1 1 auto;
  width: 1%;
  min-width: 0;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
}

/* Etiquetas */
label {
  margin-bottom: 0.5rem;
  font-weight: 500;
  color: #495057;
  font-size: 0.875rem;
}

label {
  font-size: 14px;
  font-weight: 500;
  color: #374151;
}

input[type="text"],
input[type="number"],
select,
textarea {
  padding: 10px 12px;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 14px;
  transition: border-color 0.2s, box-shadow 0.2s;
}

input[type="text"]:focus,
input[type="number"]:focus,
select:focus,
textarea:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

textarea {
  resize: vertical;
  min-height: 80px;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  gap: 1rem;
  margin-top: auto;
  padding-top: 1.5rem;
  border-top: 1px solid #e9ecef;
}

/* Botones */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  font-weight: 500;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  user-select: none;
  border: 1px solid transparent;
  padding: 0.5rem 1.5rem;
  font-size: 0.9375rem;
  line-height: 1.5;
  border-radius: 0.375rem;
  transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, 
              border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
  cursor: pointer;
}

.btn-primary {
  color: #fff;
  background-color: #0d6efd;
  border-color: #0d6efd;
}

.btn-primary:hover {
  background-color: #0b5ed7;
  border-color: #0a58ca;
}

.btn-outline-secondary {
  color: #6c757d;
  border-color: #6c757d;
  background-color: transparent;
}

.btn-outline-secondary:hover {
  color: #fff;
  background-color: #6c757d;
  border-color: #6c757d;
}

/* Responsive */
@media (max-width: 992px) {
  .form-grid {
    grid-template-columns: 1fr;
  }
  
  .image-preview {
    height: 200px;
  }
}

@media (max-width: 576px) {
  .form-row {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }
  
  .form-actions {
    flex-direction: column;
    gap: 0.75rem;
  }
  
  .btn {
    width: 100%;
  }
}

/* Estilos existentes */
.inventory-view {
  padding: 32px;
  background: #f9fafb;
  min-height: 100vh;
  position: relative;
}

.inventory-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 32px;
  flex-wrap: wrap;
  gap: 16px;
}

.page-title {
  font-size: 32px;
  font-weight: 700;
  color: #1a1a1a;
  margin: 0 0 8px 0;
}

.page-subtitle {
  font-size: 14px;
  color: #666;
  margin: 0;
}

.header-actions {
  display: flex;
  gap: 12px;
}

.btn-primary,
.btn-secondary {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 10px 20px;
  border-radius: 8px;
  font-size: 14px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s;
  border: none;
}

.btn-primary {
  background: #3b82f6;
  color: white;
}

.btn-primary:hover {
  background: #2563eb;
}

.btn-secondary {
  background: #10b981;
  color: white;
}

.btn-secondary:hover {
  background: #059669;
}

.btn-primary svg,
.btn-secondary svg {
  width: 18px;
  height: 18px;
}

.tabs-container {
  margin-bottom: 24px;
}

.tabs {
  display: flex;
  gap: 8px;
  border-bottom: 2px solid #e5e7eb;
  overflow-x: auto;
}

.tab {
  display: flex;
  align-items: center;
  gap: 8px;
  padding: 12px 16px;
  background: none;
  border: none;
  font-size: 14px;
  font-weight: 500;
  color: #666;
  cursor: pointer;
  border-bottom: 2px solid transparent;
  margin-bottom: -2px;
  transition: all 0.2s;
  white-space: nowrap;
}

.tab svg {
  width: 16px;
  height: 16px;
}

.tab:hover {
  color: #1a1a1a;
}

.tab.active {
  color: #3b82f6;
  border-bottom-color: #3b82f6;
}

.recent-activity {
  background: white;
  border-radius: 12px;
  padding: 24px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  margin-top: 32px;
}

.section-title {
  font-size: 18px;
  font-weight: 600;
  color: #1a1a1a;
  margin: 0 0 20px 0;
}

.activity-list {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.activity-item {
  display: flex;
  align-items: flex-start;
  gap: 12px;
}

.activity-icon {
  width: 40px;
  height: 40px;
  border-radius: 10px;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.activity-icon svg {
  width: 20px;
  height: 20px;
}

.activity-content {
  flex: 1;
}

.activity-title {
  font-size: 14px;
  font-weight: 600;
  color: #1a1a1a;
  margin-bottom: 4px;
}

.activity-description {
  font-size: 13px;
  color: #666;
}

.activity-time {
  font-size: 12px;
  color: #999;
  white-space: nowrap;
}
</style>
